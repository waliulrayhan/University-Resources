• Write a shell script that takes two numbers as input and outputs their sum.

#!/bin/bash
echo "Enter the first number: "
read num1
echo "Enter the second number: "
read num2
sum=$((num1 + num2))
echo "The sum is: $sum"

• Write a shell script that lists all the files in a directory.

#!/bin/bash
echo "Files in the current directory:"
ls

• Write a shell script that checks whether a given number is even or odd.

#!/bin/bash
echo "Enter a number: "
read num
if ((num % 2 == 0)); then
  echo "$num is even"
else
  echo "$num is odd"
fi

• Write a shell script that displays the current date and time.

#!/bin/bash
echo "Current date and time:"
date 

• Write a shell script that counts the number of lines in a given file.

#!/bin/bash
echo "Enter the file name: "
read filename
line_count=$(wc -l < "$filename")
echo "The file $filename has $line_count lines"

• Write a shell script that takes a directory name as input and counts the number of files and subdirectories in that directory.

#!/bin/bash
echo "Enter the directory name: "
read dirname
file_count=$(find "$dirname" -type f | wc -l)
dir_count=$(find "$dirname" -type d | wc -l)
echo "Number of files: $file_count"
echo "Number of subdirectories: $dir_count" 

• Write a shell script that prompts the user to enter a number and calculates the sum of all numbers from 1 to that number.

#!/bin/bash
echo "Enter a number: "
read num
sum=0
for ((i = 1; i <= num; i++)); do
  sum=$((sum + i))
done
echo "The sum is: $sum" 

• Write a shell script that checks whether a given string is a palindrome or not.

#!/bin/bash
echo "Enter a string: "
read str
reverse=$(echo "$str" | rev)
if [ "$str" = "$reverse" ]; then
  echo "$str is a palindrome"
else
  echo "$str is not a palindrome"
fi

• Write a shell script that finds and displays all the files in a directory that have a specific extension (e.g., ".txt").

#!/bin/bash
echo "Enter the directory name: "
read dirname
echo "Enter the file extension: "
read extension
find "$dirname" -type f -name "*$extension" 

• Write a shell script that displays the size of the largest file in a directory.

#!/bin/bash

# Get the directory path from the user
echo -n "Enter the directory path: "
read directory

# Check if the directory exists
if [ ! -d "$directory" ]; then
  echo "Directory does not exist."
  exit 1
fi

# Find the largest file in the directory
largest_file=""
largest_size=0

for file in "$directory"/*; do
  if [ -f "$file" ]; then
    size=$(stat -c %s "$file")
    if [ "$size" -gt "$largest_size" ]; then
      largest_size="$size"
      largest_file="$file"
    fi
  fi
done

# Display the result
if [ -n "$largest_file" ]; then
  echo "The largest file is: $largest_file"
  echo "Size: $largest_size bytes"
else
  echo "No files found in the directory."
fi

• Write a shell script that recursively finds and counts the number of files in a directory, including all its subdirectories, and displays the count for each subdirectory.

#!/bin/bash
count_files() {
  local directory=$1
  local count=0
  for file in "$directory"/*; do
    if [[ -f "$file" ]]; then
      count=$((count + 1))
    elif [[ -d "$file" ]]; then
      subdirectory_count=$(count_files "$file")
      count=$((count + subdirectory_count))
    fi
  done
  echo "$directory: $count"
  return $count
}
echo "Enter the directory name: "
read dirname
count_files "$dirname"

• Write a shell script that finds and displays the top 5 largest files in a directory and its subdirectories.

#!/bin/bash
echo "Enter the directory name: "
read dirname
find "$dirname" -type f -exec du -ah {} + | sort -rh | head -n 5

• Write a shell script that takes a directory name as input and recursively finds and lists all files that have been modified within the last 24 hours.

#!/bin/bash
echo "Enter the directory name: "
read dirname
find "$dirname" -type f -mtime -1

• Write a shell script that takes a file name as input and replaces all occurrences of a given word with another word.

#!/bin/bash
echo "Enter the file name: "
read filename
echo "Enter the word to replace: "
read word1
echo "Enter the new word: "
read word2
sed -i "s/$word1/$word2/g" "$filename"
echo "Replacement complete."

• Write a shell script that monitors a log file in real-time and displays new lines as they are added to the file.

#!/bin/bash
echo "Enter the log file name: "
read logfile
tail -f "$logfile"
